name: CI/CD Pipeline to EC2

on:
  push:
    branches: [main] # Запускать при пуше в ветку main

jobs:
  deploy:
    runs-on: ubuntu-latest


    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Полная история для Git Submodules, если используются

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3 # Более удобный способ настройки SSH
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to Server via SSH
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        # Замените на публичный URL вашего репозитория,
        # если репозиторий приватный, нужно настроить SSH-доступ для Git
        REPO_REMOTE_URL: "https://github.com/zhenyapetko/portfolio-site.git" 

      run: |
        set -e # Выйти немедленно, если любая команда завершится неудачей

        echo "Connecting to ${{ env.SSH_USERNAME }}@${{ env.SSH_HOST }}"

        # Использование heredoc (EOF) для более чистой передачи многострочного скрипта
        # Это позволяет избежать проблем с экранированием и подстановкой переменных
        ssh -o StrictHostKeyChecking=no ${{ env.SSH_USERNAME }}@${{ env.SSH_HOST }} << 'EOF_SSH_SCRIPT'
          set -e # Обязательно повторяем set -e внутри скрипта на сервере
          
          REPO_PATH="/opt/portfolio-site" # Путь, где Docker Compose проект на сервере
          
          # УБЕДИТЬСЯ, ЧТО МЕСТО ЕСТЬ
          echo "Performing Docker system prune..."
          docker system prune -f
          docker builder prune -f
          docker volume prune -f
          
          # --- Подготовка репозитория ---
          if [ ! -d "$REPO_PATH" ]; then
            echo "Cloning repository to $REPO_PATH..."
            git clone "$REPO_REMOTE_URL" "$REPO_PATH" || { echo "Failed to clone repository"; exit 1; }
          fi
          
          echo "Entering project directory: $REPO_PATH"
          cd "$REPO_PATH" || { echo "Failed to change directory to $REPO_PATH"; exit 1; }

          echo "Pulling latest changes from Git..."
          git pull origin main || { echo "Failed to pull latest changes"; exit 1; }
          
          # --- Docker Compose действия ---
          echo "Stopping existing services..."
          docker-compose down || echo "No running services to stop or failed gracefully."
          
          echo "Building services..."
          docker-compose build --no-cache || { echo "Failed to build Docker images"; exit 1; }
          
          echo "Starting services..."
          docker-compose up -d --force-recreate || { echo "Failed to start Docker Compose services"; exit 1; }
          
          echo "Deployment successful."
        EOF_SSH_SCRIPT

    # --- Telegram-уведомления теперь как отдельные шаги, как и должны быть ---
    - name: Send Telegram Notification (Success)
      if: success()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TG_CHAT_ID }}
        token: ${{ secrets.TG_BOT_TOKEN }}
        format: markdown
        message: |
          ✅ *Деплой успешен!*
          
          [Перейти на сайт](http://${{ secrets.DOMAIN_NAME }})
          [Посмотреть логи](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
    
    - name: Send Telegram Notification (Failure)
      if: failure()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TG_CHAT_ID }}
        token: ${{ secrets.TG_BOT_TOKEN }}
        format: markdown
        message: |
          ❌ *Деплой провален!*
          
          [Посмотреть логи](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})