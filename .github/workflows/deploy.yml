name: CI/CD Pipeline to EC2 With Image Push

on:
  push:
    branches: [main]

jobs:
  deploy: # Одно Job, но с логичным порядком шагов
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx and Compose
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build Docker image
      run: docker compose build portfolio-site

    # --- Минималистичный Health Check на запуск контейнера после сборки ---
    - name: Run simple container launch check
      run: |
        set -e
        echo "Running simple container launch check..."
        
        docker run -d --name portfolio-site-test -p 8080:80 zhenyapetko/portfolio-site:latest || { echo "ERROR: Could not start portfolio-site-test container!"; exit 1; }
        
        sleep 5 # Даем контейнеру время на запуск
        
        # Проверяем, что контейнер находится в состоянии "running"
        CONTAINER_STATUS=$(docker inspect portfolio-site-test --format='{{.State.Status}}')
        
        if [ "$CONTAINER_STATUS" == "running" ]; then
            echo "Container 'portfolio-site-test' is running. Test passed."
        else
            echo "Error: Container 'portfolio-site-test' is not running. Status: $CONTAINER_STATUS"
            docker logs portfolio-site-test # Показываем логи для отладки
            exit 1
        fi
        
        docker rm -f portfolio-site-test || true # Удаляем временный контейнер

    - name: Push Docker image to Docker Hub
      run: docker compose push portfolio-site

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to Server via SSH
      env:
        SSH_HOST: ${{ secrets.SSH_HOST }}
        SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
        DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        GIT_REPO_SSH_URL: "git@github.com:zhenyapetko/portfolio-site.git"
        DOCKER_IMAGE_NAME: "zhenyapetko/portfolio-site:latest"
        DEPLOY_PATH: "/opt/portfolio-site"

      run: |
        set -e

        echo "Connecting to ${SSH_USERNAME}@${SSH_HOST}"

        ssh -o StrictHostKeyChecking=no \
            -o SendEnv=DOCKER_USER,DOCKER_PASSWORD,GIT_REPO_SSH_URL,DOCKER_IMAGE_NAME,DEPLOY_PATH,DOMAIN_NAME \
            ${SSH_USERNAME}@${SSH_HOST} << EOF_SSH_SCRIPT
          set -e

          echo "--- Выполнение скрипта деплоя на удаленном сервере ---"
          
          if [ ! -d "${DEPLOY_PATH}/.git" ]; then
            echo "Repository not found at ${DEPLOY_PATH}, cloning it..."
            mkdir -p "${DEPLOY_PATH}" || { echo "ERROR: Failed to create directory ${DEPLOY_PATH}"; exit 1; }
            git clone "${GIT_REPO_SSH_URL}" "${DEPLOY_PATH}" || { echo "ERROR: Failed to clone repository ${GIT_REPO_SSH_URL}"; exit 1; }
          fi
          
          echo "Entering project directory: ${DEPLOY_PATH}"
          cd "${DEPLOY_PATH}" || { echo "ERROR: Failed to change directory to ${DEPLOY_PATH}"; exit 1; }

          echo "Pulling latest git changes for configuration files..."
          git pull origin main || { echo "ERROR: Failed to pull latest configuration changes"; exit 1; }

          echo "Performing Docker system cleanup..."
          docker system prune -af
          docker volume prune -f
          
          echo "Stopping existing services..."
          docker compose down --remove-orphans || true 

          echo "Logging into Docker Hub on EC2, username: ${DOCKER_USER}..."
          echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USER}" --password-stdin || { echo "ERROR: Failed to login to Docker Hub on EC2!"; exit 1; }

          echo "Pulling latest Docker image from Docker Hub, image: ${DOCKER_IMAGE_NAME}..."
          docker pull "${DOCKER_IMAGE_NAME}" || { echo "ERROR: Failed to pull latest image from Docker Hub!"; exit 1; }
          
          echo "Starting services..."
          docker compose up -d --force-recreate --remove-orphans || { echo "ERROR: Failed to start Docker Compose services!"; exit 1; }
          
          echo "--- Docker Compose services started. ---"
          
          echo "Deployment process finished."
        EOF_SSH_SCRIPT

    - name: Send Telegram Notification (Success)
      if: success()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TG_CHAT_ID }}
        token: ${{ secrets.TG_BOT_TOKEN }}
        format: markdown
        message: |
          ✅ *Деплой успешен!*
          
          [Перейти на сайт](http://${{ secrets.DOMAIN_NAME }})
          [Посмотреть логи](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
    
    - name: Send Telegram Notification (Failure)
      if: failure()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TG_CHAT_ID }}
        token: ${{ secrets.TG_BOT_TOKEN }}
        format: markdown
        message: |
          ❌ *Деплой провален!*
          
          [Посмотреть логи](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})