name: CI/CD Pipeline to EC2 With Image Push

on:
  push:
    branches: [main]

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Docker Buildx and Compose
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build Docker image
      run: docker compose build website
  
    - name: Verify Docker image was built
      run: |
        set -e
        IMAGE_NAME="zhenyapetko/portfolio-site:latest"
        echo "Verifying that image '$IMAGE_NAME' was built successfully..."
        

        docker image inspect "$IMAGE_NAME" > /dev/null 2>&1
        
        if [ $? -eq 0 ]; then
          echo "Docker image '$IMAGE_NAME' found locally. Build verification passed."
        else
          echo "Error: Docker image '$IMAGE_NAME' not found locally. Build verification failed."
          exit 1
        fi
      
    - name: Push Docker image to Docker Hub
      run: docker compose push website
    
  deploy:
    runs-on: ubuntu-latest
    needs: build-test-push
    
    steps:

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server via SSH
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          GIT_REPO_SSH_URL: "git@github.com:zhenyapetko/portfolio-site.git"
          DOCKER_IMAGE_NAME: "zhenyapetko/portfolio-site:latest"
          DEPLOY_PATH: "/opt/portfolio-site"

        run: |
          set -e

          echo "Connecting to ${SSH_USERNAME}@${SSH_HOST}"

          ssh -o StrictHostKeyChecking=no \
              -o SendEnv=DOCKER_USER,DOCKER_PASSWORD,GIT_REPO_SSH_URL,DOCKER_IMAGE_NAME,DEPLOY_PATH,DOMAIN_NAME \
              ${SSH_USERNAME}@${SSH_HOST} << EOF_SSH_SCRIPT
            set -e

            echo "--- Выполнение скрипта деплоя на удаленном сервере ---"
          
          
            cd "${DEPLOY_PATH}" 

            echo "Logging into Docker Hub on EC2, username: ${DOCKER_USER}..."
            echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USER}" --password-stdin

            echo "Pulling new image: ${DOCKER_IMAGE_NAME}"
            docker pull "${DOCKER_IMAGE_NAME}"

            echo "Restarting service: website"
            docker compose up -d --force-recreate --no-deps website

            echo "🧹 Cleaning unused Docker images..."
            docker image prune -f
          
            echo "--- Сервис успешно обновлен и запущен ---"

            echo "Deployment process finished."
          EOF_SSH_SCRIPT

      - name: Send Telegram Notification (Success)
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_CHAT_ID }}
          token: ${{ secrets.TG_BOT_TOKEN }}
          format: markdown
          message: |
            ✅ *Деплой успешен!*
          
            [Перейти на сайт](http://${{ secrets.DOMAIN_NAME }})
            [Посмотреть логи](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
    
      - name: Send Telegram Notification (Failure)
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TG_CHAT_ID }}
          token: ${{ secrets.TG_BOT_TOKEN }}
          format: markdown
          message: |
            ❌ *Деплой провален!*
          
            [Посмотреть логи](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})