services:

  nginx-proxy:
    image: nginx:alpine
    ports:
      - "80:80"   
      - "443:443"  
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Только чтение
      - certbot_certs:/etc/letsencrypt:ro  # Добавьте это!
      - certbot_webroot:/var/www/certbot:ro
    depends_on:
      - website    
      - grafana    
      - prometheus 
    networks:
      - monitoring
    restart: unless-stopped
  website: 
    image: zhenyapetko/portfolio-site:latest
    build: .  
    depends_on:  # Ждёт Prometheus
      - prometheus
    networks:
      - monitoring
    restart: unless-stopped

  certbot:
    container_name: portfolio-site-certbot-new  # добавляем уникальное имя
    image: certbot/certbot
    volumes:
      - certbot_webroot:/var/www/certbot
      - certbot_certs:/etc/letsencrypt
    command:
      - "certonly"
      - "--webroot"
      - "-w"
      - "/var/www/certbot"
      - "-d"
      - "e-petko.dev"
      - "-d"
      - "www.e-petko.dev"
      - "-d"
      - "grafana.e-petko.dev"
      - "-d"
      - "prometheus.e-petko.dev"
      - "--email"
      - "zhen.petko@gmail.com"
      - "--agree-tos"
      - "--non-interactive"
    networks:
      - monitoring

  prometheus:  
    image: prom/prometheus:latest 
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml  # Конфиг (создай файлы)
      - prometheus_data:/prometheus  # Persist data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_DOMAIN=grafana.e-petko.dev
      - GF_SERVER_ROOT_URL=https://grafana.e-petko.dev/
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning:ro
    networks:
      - monitoring
    depends_on:
      - loki
    restart: unless-stopped

  node-exporter:  # Exporter для системных metrics (подключает к Prometheus)
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
    networks:
      - monitoring
    restart: unless-stopped

  blackbox-exporter:
    image: prom/blackbox-exporter:latest
    networks:
      - monitoring
    restart: unless-stopped

  loki:
    image: grafana/loki:2.9.4
    container_name: loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yml
    volumes:
      - loki_data:/loki
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yml
    networks:
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "timeout 5s bash -c 'echo > /dev/tcp/localhost/3100' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  promtail:
    image: grafana/promtail:2.9.4
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring
    depends_on:
      - loki

volumes:
  prometheus_data:
  grafana_data:
  certbot_webroot:
  certbot_certs:
  loki_data:


networks:
  monitoring:
    driver: bridge